/*
 * Main.java
 *
 * Created on Четвъвтък, 2005, Октомври 13, 16:21
 */

package propviewer;
import javax.swing.*;
import javax.swing.event.*;
import java.io.*;
import java.util.Properties;
/**
 *
 * @author  Todor Lukanov
 */
public class PropViewer extends javax.swing.JDialog
        implements ListSelectionListener {
    
    // Private variables
    private FileOutputStream outStream;
    private Properties prop;
    private DefaultListModel listModel;
    private String sFileName;
    private java.awt.Dimension dim;
    private int x,y;
    /** Creates new form Main */
    public PropViewer(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Prepare list
        listModel = new DefaultListModel();
        jPropList.setModel(listModel);
        jPropList.addListSelectionListener(this);
        // Init and fill properties
        prop = new Properties();
        initProperties();
        fillList();
        // Init rest of variables
        sFileName = new String();
        dim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        x = (((dim.width)-(this.getSize().width))/2);
        y = (((dim.height)-(this.getSize().height))/2);
        this.setLocation(x,y);
    }
    
    // Property list related members
    /** Creates default property list */
    private void initProperties() {
        prop.setProperty("Firms","1");
        prop.setProperty("Name1","ИНСАЙД ООД - Пловдив");
        prop.setProperty("Driver1","com.mysql.jdbc.Driver");
        prop.setProperty("URL1","jdbc:mysql://localhost:3306/mida");
    }
    
    /** Fill list items to list control*/
    private void fillList() {
        int i, n;
        Integer iIndex;
        String sKey;
        n = Integer.valueOf(prop.getProperty("Firms"));
        listModel.addElement("Firms");
        for(i=1;i<=n;++i){
            iIndex = i;
            // Create key and add to list control
            sKey = "Name"+iIndex.toString();
            listModel.addElement(sKey);
            sKey = "Driver"+iIndex.toString();
            listModel.addElement(sKey);
            sKey = "URL"+iIndex.toString();
            listModel.addElement(sKey);
        }
        jPropList.setSelectedIndex(0);
        jPropList.ensureIndexIsVisible(0);
    }
    
    /** Cleanup list and property */
    private void clearAll() {
        listModel.removeAllElements();
        prop.clear();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        jPropPanel = new javax.swing.JPanel();
        jAddBtn = new javax.swing.JButton();
        jDelBtn = new javax.swing.JButton();
        jNameTextField = new javax.swing.JTextField();
        jListPane = new javax.swing.JScrollPane();
        jPropList = new javax.swing.JList();
        jValuePane = new javax.swing.JScrollPane();
        jValTextArea = new javax.swing.JTextArea();
        jUpdateBtn = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        jNewBtn = new javax.swing.JButton();
        jLoadBtn = new javax.swing.JButton();
        jSaveBtn = new javax.swing.JButton();
        jExitBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("\u0420\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u043d\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 \u0437\u0430 Imakanter ERP");
        setFont(new java.awt.Font("Arial", 0, 12));
        setModal(true);
        setName("PropMainDlg");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        mainPanel.setLayout(new java.awt.GridBagLayout());

        jPropPanel.setLayout(null);

        jPropPanel.setBorder(new javax.swing.border.TitledBorder("\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438"));
        jPropPanel.setPreferredSize(new java.awt.Dimension(40, 36));
        jPropPanel.setRequestFocusEnabled(false);
        jAddBtn.setText("\u0414\u043e\u0431\u0430\u0432\u0438");
        jAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddBtnActionPerformed(evt);
            }
        });

        jPropPanel.add(jAddBtn);
        jAddBtn.setBounds(218, 114, 200, 23);

        jDelBtn.setText("\u041f\u0440\u0435\u043c\u0430\u0445\u043d\u0438");
        jDelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDelBtnActionPerformed(evt);
            }
        });

        jPropPanel.add(jDelBtn);
        jDelBtn.setBounds(218, 138, 200, 22);

        jNameTextField.setToolTipText("\u0418\u043c\u0435 \u043d\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u044a\u0440\u0430");
        jPropPanel.add(jNameTextField);
        jNameTextField.setBounds(216, 20, 204, 19);

        jListPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jPropList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jPropList.setToolTipText("\u0421\u043f\u0438\u0441\u044a\u043a \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438");
        jListPane.setViewportView(jPropList);

        jPropPanel.add(jListPane);
        jListPane.setBounds(14, 20, 190, 166);

        jValTextArea.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11));
        jValTextArea.setToolTipText("\u0421\u0442\u043e\u0439\u043d\u043e\u0441\u0442 \u043d\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u044a\u0440\u0430");
        jValuePane.setViewportView(jValTextArea);

        jPropPanel.add(jValuePane);
        jValuePane.setBounds(216, 48, 204, 60);

        jUpdateBtn.setText("\u041f\u0440\u043e\u043c\u0435\u043d\u0438");
        jUpdateBtn.setToolTipText("");
        jUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateBtnActionPerformed(evt);
            }
        });

        jPropPanel.add(jUpdateBtn);
        jUpdateBtn.setBounds(218, 162, 200, 23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 433;
        gridBagConstraints.ipady = 199;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 1);
        mainPanel.add(jPropPanel, gridBagConstraints);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setBorder(new javax.swing.border.TitledBorder(""));
        jNewBtn.setText("\u041d\u043e\u0432");
        jNewBtn.setToolTipText("\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0430 \u0442\u0438\u043f\u043e\u0432\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438");
        jNewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewBtnActionPerformed(evt);
            }
        });

        buttonPanel.add(jNewBtn);

        jLoadBtn.setText("\u041e\u0442\u0432\u043e\u0440\u0438 ...");
        jLoadBtn.setToolTipText("\u0417\u0430\u0440\u0435\u0436\u0434\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438 \u043e\u0442 \u0444\u0430\u0439\u043b");
        jLoadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLoadBtnActionPerformed(evt);
            }
        });

        buttonPanel.add(jLoadBtn);

        jSaveBtn.setText("\u0417\u0430\u043f\u0438\u0448\u0438 ...");
        jSaveBtn.setToolTipText("\u0417\u0430\u043f\u0438\u0441\u0432\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0442\u0435 \u0432\u044a\u0432 \u0444\u0430\u0439\u043b");
        jSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveBtnActionPerformed(evt);
            }
        });

        buttonPanel.add(jSaveBtn);

        jExitBtn.setText("\u0418\u0437\u0445\u043e\u0434");
        jExitBtn.setToolTipText("\u0418\u0437\u0445\u043e\u0434 \u043e\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0430\u0442\u0430");
        jExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExitBtnActionPerformed(evt);
            }
        });

        buttonPanel.add(jExitBtn);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        dispose();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed
    
    private void jNewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewBtnActionPerformed
        // Clear prop and list
        clearAll();
        // Fill with defaults
        initProperties();
        fillList();
    }//GEN-LAST:event_jNewBtnActionPerformed
    
    private void jLoadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLoadBtnActionPerformed
        FileInputStream inStream;
        try {
            //Create a file chooser
            final JFileChooser fc = new JFileChooser();
            fc.addChoosableFileFilter(new xmlFilter());
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                // Prepare
                inStream = new FileInputStream(fc.getSelectedFile());
                clearAll();
                // Load from stream
                prop.loadFromXML(inStream);
                fillList();
                inStream.close();
            }
        } catch (IOException e){
            System.err.println("IOException: " + e.getMessage());
            JOptionPane.showMessageDialog(null,"Не мога да отворя файла !","PropViewer",JOptionPane.ERROR_MESSAGE);
        } catch (Exception e){
            System.err.println("OtherException: " + e.getMessage());
        }
        
    }//GEN-LAST:event_jLoadBtnActionPerformed
    
    private void jSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveBtnActionPerformed
        FileOutputStream outStream;
        try {
            //Create a file chooser
            final JFileChooser fc = new JFileChooser();
            int returnVal = fc.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                // Prepare
                outStream = new FileOutputStream(fc.getSelectedFile());
                // Save to stream
                prop.storeToXML(outStream, "Imakante Properties");//, "cp1251");
                outStream.close();
                JOptionPane.showMessageDialog(null,"Параметрите бяха успешно записани във файл !","PropViewer",JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException e){
            System.err.println("IOException: " + e.getMessage());
            JOptionPane.showMessageDialog(null,"Не мога да запиша във файл !","PropViewer",JOptionPane.ERROR_MESSAGE);
        } catch (Exception e){
            System.err.println("OtherException: " + e.getMessage());
        }
        
    }//GEN-LAST:event_jSaveBtnActionPerformed
    
    private void jExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExitBtnActionPerformed
        dispose();
        System.exit(0);
    }//GEN-LAST:event_jExitBtnActionPerformed
    
    // List manipulation buttons
    private void jUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateBtnActionPerformed
        String sKey, sValue;
        int index;
        
        // Is there valid property name
        sKey = jNameTextField.getText();
        if (!prop.containsKey(sKey)) {
            JOptionPane.showMessageDialog(null,"Няма параметър с такова име !","PropViewer",JOptionPane.WARNING_MESSAGE);
            return;
        }
        // Update property value
        sValue = jValTextArea.getText();
        prop.setProperty(sKey, sValue);
        // Select property in list
        index = listModel.indexOf(sKey);
        // Select and show key
        if (index != -1) {
            jPropList.setSelectedIndex(index);
            jPropList.ensureIndexIsVisible(index);
        }
    }//GEN-LAST:event_jUpdateBtnActionPerformed
    
    private void jDelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDelBtnActionPerformed
        String sKey;
        
        //// Delete from properties
        // Is there valid property name
        sKey = jNameTextField.getText();
        if (!prop.containsKey(sKey)) {
            JOptionPane.showMessageDialog(null,"Няма параметър с такова име !","PropViewer",JOptionPane.WARNING_MESSAGE);
            return;
        }
        prop.remove(sKey);
        //// Delete from list
        listModel.removeElement(sKey);
    }//GEN-LAST:event_jDelBtnActionPerformed
    
    private void jAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddBtnActionPerformed
        String sKey, sValue;
        Object Old;
        int index;
        
        // Add to properties
        sKey = jNameTextField.getText();
        sValue = jValTextArea.getText();
        Old = prop.setProperty(sKey, sValue);
        // Check if this element already exists
        if (Old != null) {
            JOptionPane.showMessageDialog(null,"Такъв параметър вече съществува ! \nСтойността му беше променена.","PropViewer",JOptionPane.WARNING_MESSAGE);
        } else {
            // Add to list
            listModel.addElement(sKey);
            index = listModel.indexOf(sKey);
            // Select and show key
            if (index != -1) {
                jPropList.setSelectedIndex(index);
                jPropList.ensureIndexIsVisible(index);
            }
        }
    }//GEN-LAST:event_jAddBtnActionPerformed
    
    ///////////////////////////////////////////////////////////////////////
    // My event handlers
    
    /** This is JList data change handler*/
    public void valueChanged(ListSelectionEvent e) {
        String sKey, sValue;
        int index = jPropList.getSelectedIndex();
        if (e.getValueIsAdjusting() == false) {
            
            if (index != -1) {
                //Selection, set new data to controls.
                sKey = listModel.get(index).toString();
                jNameTextField.setText(sKey);
                sValue = prop.getProperty(sKey);
                jValTextArea.setText(sValue);
            }
        }
    }
    
    /* Button handlers*/
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    String sysLook = javax.swing.UIManager.getSystemLookAndFeelClassName();
                    javax.swing.UIManager.setLookAndFeel(sysLook);
                    
                } catch (Exception err) {
                    
                }
                new PropViewer(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton jAddBtn;
    private javax.swing.JButton jDelBtn;
    private javax.swing.JButton jExitBtn;
    private javax.swing.JScrollPane jListPane;
    private javax.swing.JButton jLoadBtn;
    private javax.swing.JTextField jNameTextField;
    private javax.swing.JButton jNewBtn;
    private javax.swing.JList jPropList;
    private javax.swing.JPanel jPropPanel;
    private javax.swing.JButton jSaveBtn;
    private javax.swing.JButton jUpdateBtn;
    private javax.swing.JTextArea jValTextArea;
    private javax.swing.JScrollPane jValuePane;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
    
    
    class xmlFilter extends javax.swing.filechooser.FileFilter {
                public boolean accept(java.io.File file) {
                    String filename = file.getName();
                    return filename.endsWith(".xml");
                }
                public String getDescription() {
                    return "*.xml";
                }
            } 
}
